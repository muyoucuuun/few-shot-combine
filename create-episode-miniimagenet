import os
import torch
from torch.utils.data import Dataset
from torchvision.transforms import transforms
import numpy as np
import collections
from PIL import Image
import csv
import random

class miniimagenet(Dataset):
"""
set episode
"""

  def __init__(self, root, mode, batchsz, n_way, k_shot, k_query, resize, startidx=0):
  
    self.batchsz = batchsz
    self.n_way = n_way
    self.k_shot = k_shot
    self.k_query = k_query
    self.setsz = self.n_way * self.k_shot
    self.querysz = self.n_way * self.k_query
    self.resize = resize
    self.startidx = startidx
    print('mode:%s, batchsize:%d, %d-way, %d-shot, %d-query, resize:%d'%(
    mode, batchsz, n_way, k_shot, k_query, resize))
    
    if mode == 'train':
      self.transform = transform.Compose([lamda x: Image.open(x).convert('RGB'),
                                          transforms.Resize((self.resize, self.resize)),
                                          transforms.ToTensor(),
                                          transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))
                                          ])
    else:
      self.transform = transform.Compose([lamda x: Image.open(x).convert('RGB'),
                                          transforms.Resize((self.resize, self.resize)),
                                          transforms.ToTensor(),
                                          transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))
                                          ])
    self.path = os.path.join(root, 'images') # image path
    csvdata = self.loadCSV(os.path.join(root, mode + '.csv')) # csv path
    self.data = []
    self.img2label = {}
    for i, (k,v) in enumerate(csvdata.items()):
        self.data.append(v)
        self.image2label[k] = i + self.startidx
    self.cls_num = len(self.data)
    
    self.create_batch(self.batchsz)
    
  def loadCSV(self, csvf):
    """
    return a dict saving the information of csv:{label:[file1, file2, ...]}
    """
    dictLabels = {}
    with open(csvf) as csvfile:
        csvreader = csv.reader(csvfile, delimiter=',')
        next(csvreader, None)
        for i,row in enumerate(csvreader):
            filename = row[0]
            label = row[1]
            # append filename to current label
            if label in dictLabels.keys():
                dictLabels[label].append(filename)
            else:
                dictLabels[label] = [filename]
      return dictLabels
    
    def create_batch(self,batchsz):
      """
      episode = batch , means how many sets want to retrain.
      """
      self.support_x_batch = []
      self.query_x_batch = []
      for b in range(batchsz): # for each batch
          # 1. select n_way classes randomly
          selected_cls = np.random.choice(self.cls_num, self.n_way, False) # no duplicate
          np.random.shuffle(selected_cls)
          support_x = []
          query_x = []
          for cls in selected_cls:
              #2. select k_shot +k_query for each class
              selected_imgs_idx = np.random.choice(len(self.data[cls]), self.k_shot + self.k_query, Fasle)
              np.random.shuffle(selected_imgs_idx)
              indexDtrain = np.array(selected_imgs_idx[:self.k_shot])  # idx for Dtrain
              indexDtest = np.array(selected_imgs_idx[self.k_shot:] # idx for Dtest
              support_x.append(
                  np.array(self.data[cls])[indexDtrain].tolist()) # get all images filename for Dtrain
              query_x.append(np.array(self.data[cls])[indexDtest].tolist())
              
          # shuffle spt set and qry set
 
